<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprt_mc_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

//====Movement
grav = 0.2;                     //gravity
hsp = 0;                        //horizontal speed
vsp = 0;                        //vertical speed
initial_jumpspeed = 9           //jump upward speed 9
jumpspeed = initial_jumpspeed;  //jumpspeed variable constanlty afected by charachter states
initial_movespeed = 4;          //pixels per second speed
movespeed = initial_movespeed;  //movespeed variable constanlty afected by charachter states
image_speed = 0.1;              //initial animation speed (idle)

//====Controller
gamepad_set_axis_deadzone(0,0.3);   //gampead joysticks deadzones

//====Stats
maxhp = 100;            //initial/max health
hp = maxhp;             //varieng health variable

//====Attack
can_attack = 1;                 //prevents looped attacks inside the attack state
combo_time = room_speed * 0.5;  //time in between attacks to toogle a combo
can_combo = 0;                  //variable that works in conjunction with combo_time
last_attack = 0;                //variable that defines last attack in a combo

//====Damage
can_take_damage = true;

//====Inital state
state = states.normal;

//====Checkpoint verifiaction and establishment
if(global.checkpointR == room){ //if no active checkpoint, set checkpoint in spawn
    x = global.checkpointx;
    y = global.checkpointy;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control invurnable state
state = states.normal;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control taking damage state

can_take_damage = true;
state = states.invincible;

alarm[3] = room_speed * 2;  //set invunerable time

if(hp &lt;= 0){
    if (global.checkpointR != 0){
        room_goto(global.checkpointR);
    }else{
        room_restart();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset can combo variable
//This timer is reset every time the player attacks
//If it reaches 0 and activates it can no longer perfomr a concecutive combo
//And the last_attack = 0, this to allow a future new first attack.
can_combo = 0;
last_attack = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Attacking variable "Can attack"
//This timer manages the transition between the attack state
//and the normal state, the player stays a short period of time
//in the attack state "freezed", this controls that
state = states.normal;
can_attack = 1;         //prevents looped attacks inside the attack state
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Switch between character states
switch (state){
    case states.normal: scr_player_normal();
    break;
    case states.attacking: scr_player_attacking();
    break;
    case states.damage: scr_player_damage();
    break;
    case states.invincible: scr_player_normal_invincible();
    break;
    case states.crouch: scr_player_crouch();
    break;
    case states.downward: scr_player_downward();
    break;
    case states.dash: scr_player_dash();
    break;
}

//function to enable fullscreen, used in development
if mouse_check_button_pressed(mb_left)
   {
   if window_get_fullscreen()
      {
      window_set_fullscreen(false);
      }
   else
      {
      window_set_fullscreen(true);
      }
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
